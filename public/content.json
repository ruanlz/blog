[{"title":"","date":"2018-04-29T06:42:47.031Z","path":"2018/04/29/使用Github和Hexo搭建博客/","text":"相关步骤：1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择 注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面 输入npm install hexo -g，开始安装Hexo 输入hexo -v，检查hexo是否安装成功 输入hexo init，初始化该文件夹（有点漫长的等待。。。） 看到后面的“Start blogging with Hexo！”，激动有木有！！！！！ 输入npm install，安装所需要的组件 输入hexo g，首次体验Hexo 输入hexo s，开启服务器，访问该网址，正式体验Hexo 问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号 那么出现如下图就成功了 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话） 上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱 输入cd ~/.ssh，检查是否由.ssh的文件夹 输入ls，列出该文件下的内容。下图说明存在 输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决首先，清除所有的key-pairssh-add -Drm -r ~/.ssh删除你在github中的public-key重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“接下来正常操作在github上添加公钥public-key:1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板2、在github上添加公钥时，直接复制即可3、保存测试：在终端 ssh -T git@github.com 6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾） repo值是你在github项目里的ssh（右下角） 7、新建一篇博客，在cmd执行命令：hexo new post “博客名” 这时候在文件夹_posts目录下将会看到已经创建的文件 在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save 使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。","tags":[]},{"title":"Nihao,blog","date":"2018-04-21T14:09:32.000Z","path":"2018/04/21/Nihao-blog/","text":"","tags":[]},{"title":"归并排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/归并排序/","text":"归并排序是创建在归并操作上的一种有效的排序算法，效率为O(nlogn)，1945年由冯·诺伊曼首次提出。归并排序算法主要依赖归并(Merge)操作。归并操作指的是将两个已经排序的序列合并成一个序列的操作，归并操作步骤如下： 1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列 2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置 3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 4. 重复步骤3直到某一指针到达序列尾 5. 将另一序列剩下的所有元素直接复制到合并序列尾 归并排序的代码如下： #include &lt;stdio.h&gt; #include &lt;limits.h&gt;// 分类 ————– 内部比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- O(nlogn)// 最优时间复杂度 —- O(nlogn)// 平均时间复杂度 —- O(nlogn)// 所需辅助空间 —— O(n)// 稳定性 ———— 稳定void Merge(int A[], int left, int mid, int right)// 合并两个已排好序的数组A[left…mid]和A[mid+1…right]{ int len = right - left + 1; int temp = new int[len]; // 辅助空间O(n) int index = 0; int i = left; // 前一数组的起始元素 int j = mid + 1; // 后一数组的起始元素 while (i &lt;= mid &amp;&amp; j &lt;= right) { temp[index++] = A[i] &lt;= A[j] ? A[i++] : A[j++]; // 带等号保证归并排序的稳定性 } while (i &lt;= mid) { temp[index++] = A[i++]; } while (j &lt;= right) { temp[index++] = A[j++]; } for (int k = 0; k &lt; len; k++) { A[left++] = temp[k]; }}void MergeSortRecursion(int A[], int left, int right) // 递归实现的归并排序(自顶向下){ if (left == right) // 当待排序的序列长度为1时，递归开始回溯，进行merge操作 return; int mid = (left + right) / 2; MergeSortRecursion(A, left, mid); MergeSortRecursion(A, mid + 1, right); Merge(A, left, mid, right);}void MergeSortIteration(int A[], int len) // 非递归(迭代)实现的归并排序(自底向上){ int left, mid, right;// 子数组索引,前一个为A[left…mid]，后一个子数组为A[mid+1…right] for (int i = 1; i &lt; len; i = 2) // 子数组的大小i初始为1，每轮翻倍 { left = 0; while (left + i &lt; len) // 后一个子数组存在(需要归并) { mid = left + i - 1; right = mid + i &lt; len ? mid + i : len - 1;// 后一个子数组大小可能不够 Merge(A, left, mid, right); left = right + 1; // 前一个子数组索引向后移动 } }}int main(){ int A1[] = { 6, 5, 3, 1, 8, 7, 2, 4 }; // 从小到大归并排序 int A2[] = { 6, 5, 3, 1, 8, 7, 2, 4 }; int n1 = sizeof(A1) / sizeof(int); int n2 = sizeof(A2) / sizeof(int); MergeSortRecursion(A1, 0, n1 - 1); // 递归实现 MergeSortIteration(A2, n2); // 非递归实现 printf(“递归实现的归并排序结果：”); for (int i = 0; i &lt; n1; i++) { printf(“%d “, A1[i]); } printf(“\\n”); printf(“非递归实现的归并排序结果：”); for (int i = 0; i &lt; n2; i++) { printf(“%d “, A2[i]); } printf(“\\n”); return 0;} 上述代码对序列{ 6, 5, 3, 1, 8, 7, 2, 4 }进行归并排序的实例如下 使用归并排序为一列数字进行排序的宏观过程： 归并排序除了可以对数组进行排序，还可以高效的求出数组小和（即单调和）以及数组中的逆序对，详见这篇博文。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"选择排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/选择排序/","text":"选择排序也是一种简单直观的排序算法。它的工作原理很容易理解：初始时在序列中找到最小（大）元素，放到序列的起始位置作为已排序序列；然后，再从剩余未排序元素中继续寻找最小（大）元素，放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。注意选择排序与冒泡排序的区别：冒泡排序通过依次交换相邻两个顺序不合法的元素位置，从而将当前最小（大）元素放到合适的位置；而选择排序每遍历一次都记住了当前最小（大）元素的位置，最后仅需一次交换操作即可将其放到合适的位置。选择排序的代码如下： #include &lt;stdio.h&gt;// 分类 ————– 内部比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- O(n^2)// 最优时间复杂度 —- O(n^2)// 平均时间复杂度 —- O(n^2)// 所需辅助空间 —— O(1)// 稳定性 ———— 不稳定void Swap(int A[], int i, int j){ int temp = A[i]; A[i] = A[j]; A[j] = temp;}void SelectionSort(int A[], int n){ for (int i = 0; i &lt; n - 1; i++) // i为已排序序列的末尾 { int min = i; for (int j = i + 1; j &lt; n; j++) // 未排序序列 { if (A[j] &lt; A[min]) // 找出未排序序列中的最小值 { min = j; } } if (min != i) { Swap(A, min, i); // 放到已排序序列的末尾，该操作很有可能把稳定性打乱，所以选择排序是不稳定的排序算法 } }}int main(){ int A[] = { 8, 5, 2, 6, 9, 3, 1, 4, 0, 7 }; // 从小到大选择排序 int n = sizeof(A) / sizeof(int); SelectionSort(A, n); printf(“选择排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 上述代码对序列{ 8, 5, 2, 6, 9, 3, 1, 4, 0, 7 }进行选择排序的实现过程如右图 使用选择排序为一列数字进行排序的宏观过程： 选择排序是不稳定的排序算法，不稳定发生在最小元素与A[i]交换的时刻。比如序列：{ 5, 8, 5, 2, 9 }，一次选择的最小元素是2，然后把2和第一个5进行交换，从而改变了两个元素5的相对次序。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"冒泡排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/冒泡排序/","text":"1.原理：比较两个相邻的元素，将值大的元素交换至右端。 思路：依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。重复第一趟步骤，直至全部排序完成。 举例说明：要排序数组：int[] arr={6,3,8,2,9,1}; 第一趟排序： 第一次排序：6和3比较，6大于3，交换位置： 3 6 8 2 9 1 第二次排序：6和8比较，6小于8，不交换位置：3 6 8 2 9 1 第三次排序：8和2比较，8大于2，交换位置： 3 6 2 8 9 1 第四次排序：8和9比较，8小于9，不交换位置：3 6 2 8 9 1 第五次排序：9和1比较：9大于1，交换位置： 3 6 2 8 1 9 第一趟总共进行了5次比较， 排序结果： 3 6 2 8 1 9 --------------------------------------------------------------------- 第二趟排序： 第一次排序：3和6比较，3小于6，不交换位置：3 6 2 8 1 9 第二次排序：6和2比较，6大于2，交换位置： 3 2 6 8 1 9 第三次排序：6和8比较，6大于8，不交换位置：3 2 6 8 1 9 第四次排序：8和1比较，8大于1，交换位置： 3 2 6 1 8 9 第二趟总共进行了4次比较， 排序结果： 3 2 6 1 8 9 --------------------------------------------------------------------- 第三趟排序： 第一次排序：3和2比较，3大于2，交换位置： 2 3 6 1 8 9 第二次排序：3和6比较，3小于6，不交换位置：2 3 6 1 8 9 第三次排序：6和1比较，6大于1，交换位置： 2 3 1 6 8 9 第二趟总共进行了3次比较， 排序结果： 2 3 1 6 8 9 --------------------------------------------------------------------- 第四趟排序： 第一次排序：2和3比较，2小于3，不交换位置：2 3 1 6 8 9 第二次排序：3和1比较，3大于1，交换位置： 2 1 3 6 8 9 第二趟总共进行了2次比较， 排序结果： 2 1 3 6 8 9 --------------------------------------------------------------------- 第五趟排序： 第一次排序：2和1比较，2大于1，交换位置： 1 2 3 6 8 9 第二趟总共进行了1次比较， 排序结果： 1 2 3 6 8 9 --------------------------------------------------------------------- 最终结果：1 2 3 6 8 9 --------------------------------------------------------------------- 2.代码实现 代码实现： /* * 冒泡排序 */ public class BubbleSort { public static void BubbleSort1(int[] arr){ int i = 0, j = 0; Int size=arr.length; for (i = 0; i &lt; size - 1; i++)//一共要排序size-1次 { for (j = 0; j &lt; size - 1 - i; j++)//选出该趟排序的最大值往后移动 { if (arr[j] &gt; arr[j + 1]) { int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; } } } } } 3、算法分析（1）算法的最好时间复杂度 若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值： C(min)=n-1 M(min)=0。 冒泡排序最好的时间复杂度为O(n)。 （2）算法的最坏时间复杂度 若初始文件是反序的，需要进行n-1趟排序。每趟排序要进行n-i次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值： C(max)=n(n-1)/2=O(n^2) M(max)=3n(n-1)/2=O(n^2) 冒泡排序的最坏时间复杂度为O(n^2)。 （3）算法的平均时间复杂度为O(n^2) 虽然冒泡排序不一定要进行n-1趟，但由于它的记录移动次数较多，故平均时间性能比直接插入排序要差得多。 （4）算法稳定性 冒泡排序是就地排序，且它是稳定的。4.优化1（优化外层循环）： 若在某一趟排序中未发现气泡位置的交换，则说明待排序的无序区中所有气泡均满足轻者在上，重者在下的原则，因此，冒泡排序过程可在此趟排序后终止。为此，在下面给出的算法中，引入一个标签flag，在每趟排序开始前，先将其置为0。若排序过程中发生了交换，则将其置为1。各趟排序结束时检查flag，若未曾发生过交换则终止算法，不再进行下一趟排序。 具体算法： //冒泡排序优化1 void BubbleSort2(int[] arr) { int i = 0, j = 0;int size = arr.length; for (i = 0; i &lt; size - 1; i++)//一共要排序size-1次 { //每次遍历标志位都要先置为0，才能判断后面的元素是否发生了交换 int flag = 0; for (j = 0; j &lt; size - 1 - i; j++)//选出该趟排序的最大值往后移动 { if (arr[j] &gt; arr[j + 1]) { int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; flag = 1;//只要有发生了交换，flag就置为1 } } //判断标志位是否为0，如果为0，说明后面的元素已经有序，就直接return if (flag == 0) { return; } } } 5、算法优化2（优化内层循环） (1)记住最后一次交换发生位置lastExchange的冒泡排序在每趟扫描中，记住最后一次交换发生的位置lastExchange，（该位置之后的相邻记录均已有序）。下一趟排序开始时，R[1..lastExchange-1]是无序区，R[lastExchange..n]是有序区。这样，一趟排序可能使当前无序区扩充多个记录，因此记住最后一次交换发生的位置lastExchange，从而减少排序的趟数。具体算法：[cpp]view plaincopy //冒泡排序优化2 void BubbleSort3(int[] arr) { int i = 0, j = 0; int size = arr.length; int k = size - 1,pos = 0;//pos变量用来标记循环里最后一次交换的位置 for (i = 0; i &lt; size - 1; i++)//一共要排序size-1次 { //每次遍历标志位都要先置为0，才能判断后面的元素是否发生了交换 int flag = 0; for (j = 0; j &lt;k; j++)//选出该趟排序的最大值往后移动 { if (arr[j] &gt; arr[j + 1]) { int tmp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = tmp; flag = 1;//只要有发生了交换，flag就置为1 pos = j;//循环里最后一次交换的位置 j赋给pos } } k = pos; //判断标志位是否为0，如果为0，说明后面的元素已经有序，就直接return if (flag == 0) { return; } } }","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"基数排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/基数排序/","text":"基数排序的发明可以追溯到1887年赫尔曼·何乐礼在打孔卡片制表机上的贡献。它是这样实现的：将所有待比较正整数统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始进行基数为10的计数排序，一直到最高位计数排序完后，数列就变成一个有序序列（利用了计数排序的稳定性）。基数排序的实现代码如下： #includeusing namespace std;// 分类 ————- 内部非比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- O(n dn)// 最优时间复杂度 —- O(n dn)// 平均时间复杂度 —- O(n dn)// 所需辅助空间 —— O(n dn)// 稳定性 ———– 稳定const int dn = 3; // 待排序的元素为三位数及以下const int k = 10; // 基数为10，每一位的数字都是[0,9]内的整数int C[k];int GetDigit(int x, int d) // 获得元素x的第d位数字{ int radix[] = { 1, 1, 10, 100 };// 最大为三位数，所以这里只要到百位就满足了 return (x / radix[d]) % 10;}void CountingSort(int A[], int n, int d)// 依据元素的第d位数字，对A数组进行计数排序{ for (int i = 0; i &lt; k; i++) { C[i] = 0; } for (int i = 0; i &lt; n; i++) { C[GetDigit(A[i], d)]++; } for (int i = 1; i &lt; k; i++) { C[i] = C[i] + C[i - 1]; } int B = (int)malloc(n * sizeof(int)); for (int i = n - 1; i &gt;= 0; i–) { int dight = GetDigit(A[i], d); // 元素A[i]当前位数字为dight B[–C[dight]] = A[i]; // 根据当前位数字，把每个元素A[i]放到它在输出数组B中的正确位置上 // 当再遇到当前位数字同为dight的元素时，会将其放在当前元素的前一个位置上保证计数排序的稳定性 } for (int i = 0; i &lt; n; i++) { A[i] = B[i]; } free(B);}void LsdRadixSort(int A[], int n) // 最低位优先基数排序{ for (int d = 1; d &lt;= dn; d++) // 从低位到高位 CountingSort(A, n, d); // 依据第d位数字对A进行计数排序}int main(){ int A[] = { 20, 90, 64, 289, 998, 365, 852, 123, 789, 456 };// 针对基数排序设计的输入 int n = sizeof(A) / sizeof(int); LsdRadixSort(A, n); printf(“基数排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 下图给出了对{ 329, 457, 657, 839, 436, 720, 355 }进行基数排序的简单演示过程 图片 基数排序的时间复杂度是O(n * dn)，其中n是待排序元素个数，dn是数字位数。这个时间复杂度不一定优于O(n log n)，dn的大小取决于数字位的选择（比如比特位数），和待排序数据所属数据类型的全集的大小；dn决定了进行多少轮处理，而n是每轮处理的操作数目。如果考虑和比较排序进行对照，基数排序的形式复杂度虽然不一定更小，但由于不进行比较，因此其基本操作的代价较小，而且如果适当的选择基数，dn一般不大于log n，所以基数排序一般要快过基于比较的排序，比如快速排序。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序并不是只能用于整数排序。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"堆排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/堆排序/","text":"一、基础知识我们通常所说的堆是指二叉堆，二叉堆又称完全二叉树或者叫近似完全二叉树。二叉堆又分为最大堆和最小堆。堆排序(Heapsort)是指利用堆这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。数组可以根据索引直接获取元素，时间复杂度为O（1），也就是常量，因此对于取值效率极高。最大堆的特性如下： 父结点的键值总是大于或者等于任何一个子节点的键值每个结点的左子树和右子树都是一个最大堆最小堆的特性如下： 父结点的键值总是小于或者等于任何一个子节点的键值每个结点的左子树和右子树都是一个最小堆二、算法思想1.最大堆的算法思想是：先将初始的R[0…n-1]建立成最大堆，此时是无序堆，而堆顶是最大元素再将堆顶R[0]和无序区的最后一个记录R[n-1]交换，由此得到新的无序区R[0…n-2]和有序区R[n-1]，且满足R[0…n-2].keys ≤ R[n-1].key由于交换后，前R[0…n-2]可能不满足最大堆的性质，因此再调整前R[0…n-2]为最大堆，直到只有R[0]最后一个元素才调整完成。最大堆排序完成后，其实是升序序列，每次调整堆都是要得到最大的一个元素，然后与当前堆的最后一个元素交换，因此最后所得到的序列是升序序列。2.最小堆的算法思想是：先将初始的R[0…n-1]建立成最小堆，此时是无序堆，而堆顶元素是最小的元素再将堆顶R[0]与无序区的最后一个R[n-1]交换，由此得到新的无序堆R[0…n-2]和有序堆R[n-1]，且满足R[0…n-2].keys &gt;= R[n-1].key由于交换后，前R[0…n-2]可能不满足最小堆的性质，因此再调整前R[0…n-2]为最小堆，直到只有R[0]最后一个元素才调整完成最小堆排序完成后，其实是降序序列，每次调整堆都是要得到最小的一个元素，然后与当前无序堆的最后一个元素交换，所以所得到的序列是降序的。提示：堆排序的过程，其实就是不断地扩大有序区，然后不断地缩小无序区，直到只有有序区的过程。 三、排序过程分析因为算法比较抽象，这里直接通过举个小例子来说明堆排序的过程是如何的。下面我们用这个无序序列采用最大堆的进行堆排序，所得到的序列就是升序序列（ASC）。无序序列：89,-7,999,-89,7,0,-888,7,-7第一步：初始化建成最大堆： 图片 第二步：将堆顶最大元素999与无序区的最后一个元素交换，使999成为有序区。交换后，-7成为堆顶，由于-7并不是无序区中最大的元素，因此需要调整无序区，使无序区中最大值89成为堆顶，所以-7与89交换。交换后导致89的右子树不满足最大堆的性质，因此要对右子树调整成最大堆，所以-7要与0交换，如下图： 图片 从图中看到，当-7成89交换后，堆顶是最大元素了，但是-7的左孩子是0，右孩子是-888，由于-7&lt;0，导致-7这个结点不满足堆的性质，因此需要调整它。所以，0与-7交换。然后不断重复着第二步的过程，直到全部成为有序区。最后：所得到的是升序序列 图片 四、时间复杂度堆排序的时间，主要由建立初始堆和反复调整堆这两部分的时间开销构成.由于堆排序是不稳定的，它得扭到的时间复杂度会根据实际情况较大，因此只能取平均时间复杂度。平均时间复杂度为：O( N log2(N) )堆排序耗时的操作有：初始堆 + 反复调整堆，时间复杂度如下：1.初始建堆：每个父节点会和左右子节点进行最多2次比较和1次交换，所以复杂度跟父节点个数有关。根据2x &lt;= n（x为n个元素可以折半的次数，也就是父节点个数），得出x = log2n。即O ( log2n )2.反复调整堆：由于初始化堆过程中，会记录数组比较结果，所以堆排序对原序列的数组顺序并不敏感，最好情况和最坏情况差不多。需要抽取 n-1 次堆顶元素，每次取堆顶元素都需要重建堆（O(重建堆) &lt; O(初始堆)）。所以小于 O(n-1) O(log2n)使用建议：由于初始化堆需要比较的次数较多，因此，堆排序比较适合于数据量非常大的场合（百万数据或更多）。由于高效的快速排序是基于递归实现的，所以在数据量非常大时会发生堆栈溢出错误。 五、Java示例代码 public class HeapSort{ private static int[] sort=new int[]{1,0,10,20,3,5,6,4,9,8,12, 17,34,11}; public static void main(String[] args){ buildMaxHeapify(sort); heapSort(sort); print(sort); } private static void buildMaxHeapify(int[] data){//没有子节点的才需要创建最大堆，从最后一个的父节点开始 int startIndex=getParentIndex(data.length-1);//从尾端开始创建最大堆，每次都是正确的堆 for(int i=startIndex;i&gt;=0;i–){ maxHeapify(data,data.length,i); } } /* 创建最大堆 @paramdata @paramheapSize需要创建最大堆的大小，一般在sort的时候用到，因为最多值放在末尾，末尾就不再归入最大堆了 @paramindex当前需要创建最大堆的位置 */ private static void maxHeapify(int[] data,int heapSize,int index){//当前点与左右子节点比较 int left=getChildLeftIndex(index); int right=getChildRightIndex(index); int largest=index; if(left&lt;heapSize&amp;&amp;data[index]&lt;data[left]){ largest=left; } if(right&lt;heapSize&amp;&amp;data[largest]&lt;data[right]){ largest=right; }//得到最大值后可能需要交换，如果交换了，其子节点可能就不是最大堆了，需要重新调整 if(largest!=index){ int temp=data[index]; data[index]=data[largest]; data[largest]=temp; maxHeapify(data,heapSize,largest); } } /* 排序，最大值放在末尾，data虽然是最大堆，在排序后就成了递增的 @paramdata */ private static void heapSort(int[] data){//末尾与头交换，交换后调整最大堆 for(int i=data.length-1;i&gt;0;i–){ int temp=data[0]; data[0]=data[i]; data[i]=temp; maxHeapify(data,i,0); } } /* 父节点位置 @paramcurrent @return / private static int getParentIndex(int current){ return(current-1)&gt;&gt;1; } /* 左子节点position注意括号，加法优先级更高 @paramcurrent @return / private static int getChildLeftIndex(int current){ return(current&lt;&lt;1)+1; } /* 右子节点position @paramcurrent @return / private static int getChildRightIndex(int current){ return(current&lt;&lt;1)+2; } private static void print(int[] data){ int pre=-2; for(int i=0;i&lt;data.length;i++){ if(pre&lt;(int)getLog(i+1)){ pre=(int)getLog(i+1); System.out.println(); } System.out.print(data[i]+”|”); } } /* 以2为底的对数 @paramparam @return / private static double getLog(double param){ return Math.log(param)/Math.log(2); }}","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"虚拟机qqqqqqqqqqqqqq","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/new/","text":"设置虚拟机参数小标题1 打开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续： ffffffffffffff 打sffser开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续fffffffffffffssssss： 设置CentOS参数 打开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续：","tags":[{"name":"工具安装","slug":"工具安装","permalink":"http://ruanlz.github.io/tags/工具安装/"},{"name":"操作系统","slug":"操作系统","permalink":"http://ruanlz.github.io/tags/操作系统/"}]},{"title":"快速排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/快速排序/","text":"快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序n个元素要O(nlogn)次比较。在最坏状况下则需要O(n^2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他O(nlogn)算法更快，因为它的内部循环可以在大部分的架构上很有效率地被实现出来。快速排序使用分治策略(Divide and Conquer)来把一个序列分为两个子序列。步骤为： 1. 从序列中挑出一个元素，作为&quot;基准&quot;(pivot). 2. 把所有比基准值小的元素放在基准前面，所有比基准值大的元素放在基准的后面（相同的数可以到任一边），这个称为分区(partition)操作。 3. 对每个分区递归地进行步骤1~2，递归的结束条件是序列的大小是0或1，这时整体已经被排好序了。 快速排序的代码如下： #include &lt;stdio.h&gt;// 分类 ———— 内部比较排序// 数据结构 ——— 数组// 最差时间复杂度 —- 每次选取的基准都是最大（或最小）的元素，导致每次只划分出了一个分区，需要进行n-1次划分才能结束递归，时间复杂度为O(n^2)// 最优时间复杂度 —- 每次选取的基准都是中位数，这样每次都均匀的划分出两个分区，只需要logn次划分就能结束递归，时间复杂度为O(nlogn)// 平均时间复杂度 —- O(nlogn)// 所需辅助空间 —— 主要是递归造成的栈空间的使用(用来保存left和right等局部变量)，取决于递归树的深度，一般为O(logn)，最差为O(n)// 稳定性 ———- 不稳定void Swap(int A[], int i, int j){ int temp = A[i]; A[i] = A[j]; A[j] = temp;}int Partition(int A[], int left, int right) // 划分函数{ int pivot = A[right]; // 这里每次都选择最后一个元素作为基准 int tail = left - 1; // tail为小于基准的子数组最后一个元素的索引 for (int i = left; i &lt; right; i++) // 遍历基准以外的其他元素 { if (A[i] &lt;= pivot) // 把小于等于基准的元素放到前一个子数组末尾 { Swap(A, ++tail, i); } } Swap(A, tail + 1, right); // 最后把基准放到前一个子数组的后边，剩下的子数组既是大于基准的子数组 // 该操作很有可能把后面元素的稳定性打乱，所以快速排序是不稳定的排序算法 return tail + 1; // 返回基准的索引}void QuickSort(int A[], int left, int right){ if (left &gt;= right) return; int pivot_index = Partition(A, left, right); // 基准的索引 QuickSort(A, left, pivot_index - 1); QuickSort(A, pivot_index + 1, right);}int main(){ int A[] = { 5, 2, 9, 4, 7, 6, 1, 3, 8 }; // 从小到大快速排序 int n = sizeof(A) / sizeof(int); QuickSort(A, 0, n - 1); printf(“快速排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 使用快速排序法对一列数字进行排序的过程： 快速排序是不稳定的排序算法，不稳定发生在基准元素与A[tail+1]交换的时刻。比如序列：{ 1, 3, 4, 2, 8, 9, 8, 7, 5 }，基准元素是5，一次划分操作后5要和第一个8进行交换，从而改变了两个元素8的相对次序。 Java系统提供的Arrays.sort函数。对于基础类型，底层使用快速排序。对于非基础类型，底层使用归并排序。请问是为什么？答：这是考虑到排序算法的稳定性。对于基础类型，相同值是无差别的，排序前后相同值的相对位置并不重要，所以选择更为高效的快速排序，尽管它是不稳定的排序算法；而对于非基础类型，排序前后相等实例的相对位置不宜改变，所以选择稳定的归并排序。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"插入排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/插入排序/","text":"插入排序是一种简单直观的排序算法。它的工作原理非常类似于我们抓扑克牌 对于未排序数据(右手抓到的牌)，在已排序序列(左手已经排好序的手牌)中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。具体算法描述如下： 1. 从第一个元素开始，该元素可以认为已经被排序 2. 取出下一个元素，在已经排序的元素序列中从后向前扫描 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 5. 将新元素插入到该位置后 6. 重复步骤2~5 插入排序的代码如下： #include &lt;stdio.h&gt;// 分类 ————- 内部比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)// 最优时间复杂度 —- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)// 平均时间复杂度 —- O(n^2)// 所需辅助空间 —— O(1)// 稳定性 ———— 稳定void InsertionSort(int A[], int n){ for (int i = 1; i &lt; n; i++) // 类似抓扑克牌排序 { int get = A[i]; // 右手抓到一张扑克牌 int j = i - 1; // 拿在左手上的牌总是排序好的 while (j &gt;= 0 &amp;&amp; A[j] &gt; get) // 将抓到的牌与手牌从右向左进行比较 { A[j + 1] = A[j]; // 如果该手牌比抓到的牌大，就将其右移 j–; } A[j + 1] = get; // 直到该手牌比抓到的牌小(或二者相等)，将抓到的牌插入到该手牌右边(相等元素的相对次序未变，所以插入排序是稳定的) }}int main(){ int A[] = { 6, 5, 3, 1, 8, 7, 2, 4 };// 从小到大插入排序 int n = sizeof(A) / sizeof(int); InsertionSort(A, n); printf(“插入排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 上述代码对序列{ 6, 5, 3, 1, 8, 7, 2, 4 }进行插入排序的实现过程如下 使用插入排序为一列数字进行排序的宏观过程： 插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，比如量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。 插入排序的改进：二分插入排序 对于插入排序，如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的次数，我们称为二分插入排序，代码如下： #include &lt;stdio.h&gt;// 分类 ————– 内部比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- O(n^2)// 最优时间复杂度 —- O(nlogn)// 平均时间复杂度 —- O(n^2)// 所需辅助空间 —— O(1)// 稳定性 ———— 稳定void InsertionSortDichotomy(int A[], int n){ for (int i = 1; i &lt; n; i++) { int get = A[i]; // 右手抓到一张扑克牌 int left = 0; // 拿在左手上的牌总是排序好的，所以可以用二分法 int right = i - 1; // 手牌左右边界进行初始化 while (left &lt;= right) // 采用二分法定位新牌的位置 { int mid = (left + right) / 2; if (A[mid] &gt; get) right = mid - 1; else left = mid + 1; } for (int j = i - 1; j &gt;= left; j–) // 将欲插入新牌位置右边的牌整体向右移动一个单位 { A[j + 1] = A[j]; } A[left] = get; // 将抓到的牌插入手牌 }}int main(){ int A[] = { 5, 2, 9, 4, 7, 6, 1, 3, 8 };// 从小到大二分插入排序 int n = sizeof(A) / sizeof(int); InsertionSortDichotomy(A, n); printf(“二分插入排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 当n较大时，二分插入排序的比较次数比直接插入排序的最差情况好得多，但比直接插入排序的最好情况要差，所当以元素初始序列已经接近升序时，直接插入排序比二分插入排序比较次数少。二分插入排序元素移动次数与直接插入排序相同，依赖于元素初始序列。 插入排序的更高效改进：希尔排序(Shell Sort) 希尔排序，也叫递减增量排序，是插入排序的一种更高效的改进版本。希尔排序是不稳定的排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的： • 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率 • 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。假设有一个很小的数据在一个已按升序排好序的数组的末端。如果用复杂度为O(n^2)的排序（冒泡排序或直接插入排序），可能会进行n次的比较和交换才能将该数据移至正确位置。而希尔排序会用较大的步长移动数据，所以小数据只需进行少数比较和交换即可到正确位置。希尔排序的代码如下： #include &lt;stdio.h&gt;// 分类 ————– 内部比较排序// 数据结构 ———- 数组// 最差时间复杂度 —- 根据步长序列的不同而不同。已知最好的为O(n(logn)^2)// 最优时间复杂度 —- O(n)// 平均时间复杂度 —- 根据步长序列的不同而不同。// 所需辅助空间 —— O(1)// 稳定性 ———— 不稳定void ShellSort(int A[], int n){ int h = 0; while (h &lt;= n) // 生成初始增量 { h = 3 * h + 1; } while (h &gt;= 1) { for (int i = h; i &lt; n; i++) { int j = i - h; int get = A[i]; while (j &gt;= 0 &amp;&amp; A[j] &gt; get) { A[j + h] = A[j]; j = j - h; } A[j + h] = get; } h = (h - 1) / 3; // 递减增量 }}int main(){ int A[] = { 5, 2, 9, 4, 7, 6, 1, 3, 8 };// 从小到大希尔排序 int n = sizeof(A) / sizeof(int); ShellSort(A, n); printf(“希尔排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 以23, 10, 4, 1的步长序列进行希尔排序： 希尔排序是不稳定的排序算法，虽然一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱。比如序列：{ 3, 5, 10, 8, 7, 2, 8, 1, 20, 6 }，h=2时分成两个子序列 { 3, 10, 7, 8, 20 } 和 { 5, 8, 2, 1, 6 } ，未排序之前第二个子序列中的8在前面，现在对两个子序列进行插入排序，得到 { 3, 7, 8, 10, 20 } 和 { 1, 2, 5, 6, 8 } ，即 { 3, 1, 7, 2, 8, 5, 10, 6, 20, 8 } ，两个8的相对次序发生了改变。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"桶排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/桶排序/","text":"桶排序也叫箱排序。工作的原理是将数组元素映射到有限数量个桶里，利用计数排序可以定位桶的边界，每个桶再各自进行桶内排序（使用其它排序算法或以递归方式继续使用桶排序）。桶排序的实现代码如下： #includeusing namespace std;// 分类 ————- 内部非比较排序// 数据结构 ——— 数组// 最差时间复杂度 —- O(nlogn)或O(n^2)，只有一个桶，取决于桶内排序方式// 最优时间复杂度 —- O(n)，每个元素占一个桶// 平均时间复杂度 —- O(n)，保证各个桶内元素个数均匀即可// 所需辅助空间 —— O(n + bn)// 稳定性 ———– 稳定/ 本程序用数组模拟桶 /const int bn = 5; // 这里排序[0,49]的元素，使用5个桶就够了，也可以根据输入动态确定桶的数量int C[bn]; // 计数数组，存放桶的边界信息void InsertionSort(int A[], int left, int right){ for (int i = left + 1; i &lt;= right; i++) // 从第二张牌开始抓，直到最后一张牌 { int get = A[i]; int j = i - 1; while (j &gt;= left &amp;&amp; A[j] &gt; get) { A[j + 1] = A[j]; j–; } A[j + 1] = get; }}int MapToBucket(int x){ return x / 10; // 映射函数f(x)，作用相当于快排中的Partition，把大量数据分割成基本有序的数据块}void CountingSort(int A[], int n){ for (int i = 0; i &lt; bn; i++) { C[i] = 0; } for (int i = 0; i &lt; n; i++) // 使C[i]保存着i号桶中元素的个数 { C[MapToBucket(A[i])]++; } for (int i = 1; i &lt; bn; i++) // 定位桶边界：初始时，C[i]-1为i号桶最后一个元素的位置 { C[i] = C[i] + C[i - 1]; } int B = (int )malloc((n) * sizeof(int)); for (int i = n - 1; i &gt;= 0; i–)// 从后向前扫描保证计数排序的稳定性(重复元素相对次序不变) { int b = MapToBucket(A[i]); // 元素A[i]位于b号桶 B[–C[b]] = A[i]; // 把每个元素A[i]放到它在输出数组B中的正确位置上 // 桶的边界被更新：C[b]为b号桶第一个元素的位置 } for (int i = 0; i &lt; n; i++) { A[i] = B[i]; } free(B);}void BucketSort(int A[], int n){ CountingSort(A, n); // 利用计数排序确定各个桶的边界（分桶） for (int i = 0; i &lt; bn; i++) // 对每一个桶中的元素应用插入排序 { int left = C[i]; // C[i]为i号桶第一个元素的位置 int right = (i == bn - 1 ? n - 1 : C[i + 1] - 1);// C[i+1]-1为i号桶最后一个元素的位置 if (left &lt; right) // 对元素个数大于1的桶进行桶内插入排序 InsertionSort(A, left, right); }}int main(){ int A[] = { 29, 25, 3, 49, 9, 37, 21, 43 };// 针对桶排序设计的输入 int n = sizeof(A) / sizeof(int); BucketSort(A, n); printf(“桶排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 下图给出了对{ 29, 25, 3, 49, 9, 37, 21, 43 }进行桶排序的简单演示过程 桶排序不是比较排序，不受到O(nlogn)下限的影响，它是鸽巢排序的一种归纳结果，当所要排序的数组值分散均匀的时候，桶排序拥有线性的时间复杂度。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"qqqqqqqqqqqggggggggggggqqqqqqqqqqqq","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/虽yi/","text":"ggggggggggggggggg小标题1 打开vmware workstationsgggggggggggggg，出现如下界面，选择自定义（高级）选项，下一步继续： 打开vmware workstations，gggggggggggggg，出现如下界面，选择自定义（高级）选项，下一步继续： 设置CentOS参数 打开vmware workstations，gggggggggggggggggggggg，出现如下界面，选择自定义（高级）选项，下一步继续：","tags":[{"name":"工具安装","slug":"工具安装","permalink":"http://ruanlz.github.io/tags/工具安装/"},{"name":"操作系统","slug":"操作系统","permalink":"http://ruanlz.github.io/tags/操作系统/"}]},{"title":"虚拟机安装CentOS教程","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/虚拟机安装CentOS教程/","text":"设置虚拟机参数小标题1 打开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续： 打开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续： 设置CentOS参数 打开vmware workstations，文件-&gt;新建虚拟机，出现如下界面，选择自定义（高级）选项，下一步继续：","tags":[{"name":"工具安装","slug":"工具安装","permalink":"http://ruanlz.github.io/tags/工具安装/"},{"name":"操作系统","slug":"操作系统","permalink":"http://ruanlz.github.io/tags/操作系统/"}]},{"title":"计数排序","date":"2018-04-16T15:20:40.000Z","path":"2018/04/16/计数排序/","text":"计数排序用到一个额外的计数数组C，根据数组C来将原数组A中的元素排到正确的位置。通俗地理解，例如有10个年龄不同的人，假如统计出有8个人的年龄不比小明大（即小于等于小明的年龄，这里也包括了小明），那么小明的年龄就排在第8位，通过这种思想可以确定每个人的位置，也就排好了序。当然，年龄一样时需要特殊处理（保证稳定性）：通过反向填充目标数组，填充完毕后将对应的数字统计递减，可以确保计数排序的稳定性。计数排序的步骤如下： 1. 统计数组A中每个值A[i]出现的次数，存入C[A[i]] 2. 从前向后，使数组C中的每个值等于其与前一项相加，这样数组C[A[i]]就变成了代表数组A中小于等于A[i]的元素个数 3. 反向填充目标数组B：将数组元素A[i]放在数组B的第C[A[i]]个位置（下标为C[A[i]] - 1），每放一个元素就将C[A[i]]递减 计数排序的实现代码如下： #includeusing namespace std;// 分类 ———— 内部非比较排序// 数据结构 ——— 数组// 最差时间复杂度 —- O(n + k)// 最优时间复杂度 —- O(n + k)// 平均时间复杂度 —- O(n + k)// 所需辅助空间 —— O(n + k)// 稳定性 ———– 稳定const int k = 100; // 基数为100，排序[0,99]内的整数int C[k]; // 计数数组void CountingSort(int A[], int n){ for (int i = 0; i &lt; k; i++) // 初始化，将数组C中的元素置0(此步骤可省略，整型数组元素默认值为0) { C[i] = 0; } for (int i = 0; i &lt; n; i++) // 使C[i]保存着等于i的元素个数 { C[A[i]]++; } for (int i = 1; i &lt; k; i++) // 使C[i]保存着小于等于i的元素个数，排序后元素i就放在第C[i]个输出位置上 { C[i] = C[i] + C[i - 1]; } int B = (int )malloc((n) * sizeof(int));// 分配临时空间,长度为n，用来暂存中间数据 for (int i = n - 1; i &gt;= 0; i–) // 从后向前扫描保证计数排序的稳定性(重复元素相对次序不变) { B[–C[A[i]]] = A[i]; // 把每个元素A[i]放到它在输出数组B中的正确位置上 // 当再遇到重复元素时会被放在当前元素的前一个位置上保证计数排序的稳定性 } for (int i = 0; i &lt; n; i++) // 把临时空间B中的数据拷贝回A { A[i] = B[i]; } free(B); // 释放临时空间}int main(){ int A[] = { 15, 22, 19, 46, 27, 73, 1, 19, 8 }; // 针对计数排序设计的输入，每一个元素都在[0,100]上且有重复元素 int n = sizeof(A) / sizeof(int); CountingSort(A, n); printf(“计数排序结果：”); for (int i = 0; i &lt; n; i++) { printf(“%d “, A[i]); } printf(“\\n”); return 0;} 下图给出了对{ 4, 1, 3, 4, 3 }进行计数排序的简单演示过程 计数排序的时间复杂度和空间复杂度与数组A的数据范围（A中元素的最大值与最小值的差加上1）有关，因此对于数据范围很大的数组，计数排序需要大量时间和内存。例如：对0到99之间的数字进行排序，计数排序是最好的算法，然而计数排序并不适合按字母顺序排序人名，将计数排序用在基数排序算法中，能够更有效的排序数据范围很大的数组。","tags":[{"name":"算法排序","slug":"算法排序","permalink":"http://ruanlz.github.io/tags/算法排序/"},{"name":"基础知识","slug":"基础知识","permalink":"http://ruanlz.github.io/tags/基础知识/"}]},{"title":"Markdown语法入门","date":"2018-04-15T06:53:32.000Z","path":"2018/04/15/Markdown语法入门/","text":"导语：Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 一.Markdown 官方文档 1111111111111111Markdown 中文版语法说明二.常用的语法规则 标题Markdown中标题如果想定义一个标题，可以在前面加上#(或者用#将标题括起来)。1-6个#分别表示1-6级标题。有的编辑器需要在#和正文之间加一个空格(Atom)，有的编译器不用(MarkdownPad)，为了保持同一建议都加上空格。 #标题一 #标题一# ##标题二显示结果: 标题一标题一标题二文本样式Markdown支持4中文本样式，分别是： 加粗.斜体. 删除线. 加粗且斜体。| 样式名称 | 样例 | 输出效果 || :–: | :—: | :–: ||加粗| 加粗 |加粗||斜体| 斜体 |斜体||删除线|~~ 删除线~~ |删除线 ||加粗并斜体| _ 加粗并斜体 _ |加粗并斜体| 列表在Markdown 下，无序列表直接在文字前加 「 - 」 或者 「 * 」 即可，有序列表则直接在文字前加 「1.」「2.」「3.」 。符号要和文字之间加上一个字符的空格。 无序列表： 在文本前加 「 」 即可生成一个无序列表。快捷键：control + L （只能生成列表，不能生成子列表）在 「 」 前加两个空格键或者一个 tab 键就可以产生一个子列表。有序列表： 在文本前加 「字母.」 或 「数字.」 即可生成一个有序列表。注意，当你第一个序号使用什么作为标记的，那么同级别的列表就会自动使用其作为标记。无序列表和有序列表 *引用 只要在文本内容之前加 「 &gt; （大于号）」 即可将文本变成引用文本。快捷键：control + Q *图片与链接 如果只是简单的插入图片和连接，那么非常简单。两者仅仅是一个 「 ! 」 的区别。 图片 图片描述 快捷键：control + shift + I 链接 文本内容快捷键：control + shift + L图片和链接 水平线三个「 - 」或「 」都可以画出一条水平分割线 水平线*代码框 两对「 ` 」包裹代码前加四个空格键代码前加一个 tab 键注意，简书上需空一行后，在代码前加四个空格键或者两个 tab 键才可以生成代码框。有点遗憾的是，笔者未能找到让代码显示行数的方法。代码框*表格 在 Markdown 下制作表格，是非常非常麻烦的一件事——你必须画出来！ 表格*脚注 脚注总是成对出现的，「 [^1] 」作为标记，可以点击跳至末尾注解。「 [^1]: 」填写注解，不论写在什么位置，都会出现在文章的末尾。 脚注注释 注释是给自己看的，预览时也不会出现，当然发布出去别人也不会看见。快捷键：command + / 注释首行缩进 关于首行缩进，网上争议很多，而技术本身并没有错，不是吗？在输入法的「全角」模式下，输入两个空格键即可。 首行缩进引号 在网页上写文章建议使用直角引号『「」』。","tags":[{"name":"工具安装","slug":"工具安装","permalink":"http://ruanlz.github.io/tags/工具安装/"},{"name":"操作系统","slug":"操作系统","permalink":"http://ruanlz.github.io/tags/操作系统/"}]}]